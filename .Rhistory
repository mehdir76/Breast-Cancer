setwd("C://Users//Dell/Desktop/DAT640/Project/cancer/data")
wisconsin_bcd <- read.csv("breast_cancer_wisconsin.csv", stringsAsFactors = FALSE)
wisconsin_bcd <- read.csv("C://Users//Dell/Desktop/DAT640/Project/cancer/databreast_cancer_wisconsin.csv", stringsAsFactors = FALSE)
setwd("C://Users/Dell/Desktop/DAT640/Project/cancer")
library('ProjectTemplate')
load.project()
library(ProjectTemplate)
load.project()
library(pander)
library(caret)
wbcd <- breast.cancer.wisconsin
str(wbcd)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
table(wbcd$diagnosis)
round(prop.table(table(wbcd$diagnosis)), 3)
cbind(table(wbcd$diagnosis), round(prop.table(table(wbcd$diagnosis)), 3))
cbind(Frequency = table(wbcd$diagnosis), Percentage = (round(prop.table(table(wbcd$diagnosis)), 3)*100)
cbind(Frequency = table(wbcd$diagnosis), Percentage = round(prop.table(table(wbcd$diagnosis)), 3))
cbind(Frequency = table(wbcd$diagnosis), Percentage = round(prop.table(table(wbcd$diagnosis)), 3))
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100)
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
summary(wbcd)
load.project()
setwd("C://Users/Dell/Desktop/DAT640/Project/cancer")
library('ProjectTemplate')
load.project()
wbcd <- breast.cancer.wisconsin
str(wbcd)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
summary(wbcd)
set.seed(1)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
training <- wbcd[inTrain,]
testing <- wbcd[-inTrain,]
dim(training); dim(testing)
table(testing$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
library(randomForest)
rf_model
library(gbm)
library(rattle)
library(pROC)
library(plyr)
install.packages("gbm")
library(gbm)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive="M")
confusionMatrix(pred3)
confusionMatrix(pred3, positive = "Malignant")
confusionMatrix(pred3, testing$diagnosis, positive = "Malignant")
library('ProjectTemplate')
load.project()
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
library('ProjectTemplate')
load.project()
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
wbcd <- breast.cancer.wisconsin
str(wbcd)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
summary(wbcd)
set.seed(1)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
training <- wbcd[inTrain,]
testing <- wbcd[-inTrain,]
dim(training); dim(testing)
table(testing$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive = "Malignant")
set.seed(100)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
training <- wbcd[inTrain,]
testing <- wbcd[-inTrain,]
dim(training); dim(testing)
table(testing$diagnosis)
set.seed(100)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
set.seed(1)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
training <- wbcd[inTrain,]
testing <- wbcd[-inTrain,]
dim(training); dim(testing)
table(testing$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive = "Malignant")
pred3
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive = "Malignant")
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive = "Benign")
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive = "Benign")
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr
wbcd <- breast.cancer.wisconsin
str(wbcd)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
wbcd <- breast.cancer.wisconsin
str(wbcd)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
summary(wbcd)
set.seed(1)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
training <- wbcd[inTrain,]
testing <- wbcd[-inTrain,]
dim(training); dim(testing)
table(testing$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive = "Benign")
confusionMatrix(pred3, testing$diagnosis, positive = "Malignant")
ctrl <- trainControl(method="repeatedcv", repeats=3)
grid <- expand.grid(mtry = c(1, 2, 3, 5, 7, 10, 15, 20, 30))
set.seed(1)
rf_tune_model <- train(diagnosis ~ ., data=training, method="rf",
tuneGrid = grid, trControl = ctrl)
rf_tune_model
rf_tune_model <- train(diagnosis ~ ., data=training, method="rf",
tuneGrid = grid, trControl = ctrl)
rf_tune_model <- train(diagnosis ~ ., data=training, method="rf", tuneGrid = grid, trControl = ctrl)
rf_tune_model$finalModel
plot(rf_tune_model)
pred4 <- predict(rf_tune_model, testing)
confusionMatrix(pred4, testing$diagnosis, positive="Malignant")
varImp(rf_tune_model)
library('ProjectTemplate')
load.project()
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
wbcd <- breast.cancer.wisconsin
str(wbcd)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
summary(wbcd)
set.seed(1)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
training <- wbcd[inTrain,]
testing <- wbcd[-inTrain,]
dim(training); dim(testing)
table(testing$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred3 <- predict(rf_model, testing)
confusionMatrix(pred3, testing$diagnosis, positive = "Malignant")
ctrl <- trainControl(method="repeatedcv", repeats=3)
grid <- expand.grid(mtry = c(1, 2, 3, 5, 7, 10, 15, 20, 30))
set.seed(1)
rf_tune_model <- train(diagnosis ~ ., data=training, method="rf", tuneGrid = grid, trControl = ctrl)
rf_tune_model
rf_tune_model$finalModel
plot(rf_tune_model)
pred4 <- predict(rf_tune_model, testing)
confusionMatrix(pred4, testing$diagnosis, positive="Malignant")
varImp(rf_tune_model)
rf_roc <- roc(testing$diagnosis,
predict(rf_tune_model, testing, type = "prob")[,"M"],
levels = rev(levels(testing$diagnosis)))
rf_roc <- roc(testing$diagnosis,
predict(rf_tune_model, testing, type = "prob")[,"Malignant"],
levels = rev(levels(testing$diagnosis)))
auc(rf_roc)
plot(rf_roc)
plot.roc(smooth(rf_roc), add = TRUE, col = "blue")
plot.roc(smooth(rf_roc), col = "blue")
legend("bottomright", legend= rf_auc, col=c("#008600"), lwd=2)
legend("bottomright", legend= c(rf_auc), col=c("#008600"), lwd=2)
legend("bottomright", col=c("#008600"), lwd=2)
roc_value <- auc(rf_roc)
legend("bottomright", legend = roc_value, col=c("#008600"), lwd=2)
legend("middle", legend = roc_value, col=c("#008600"), lwd=2)
legend("center", legend = roc_value, col=c("#008600"), lwd=2)
legend("bottom", legend = roc_value, col=c("#008600"), lwd=2)
legend("bottom", legend = roc_value, col=c("#1c61b6"), lwd=2)
plot.roc(smooth(rf_roc), main = "RF ROC Curve", col = "blue")
legend("bottom", legend = c(roc_value, "ROC value"), col=c("#1c61b6"), lwd=2)
legend("bottom", legend = c("ROC value", roc_value), col=c("#1c61b6"), lwd=2)
plot.roc(smooth(rf_roc), main = "RF ROC Curve", col = "blue")
legend("bottom", legend = "ROC value", col=c("#1c61b6"), lwd=2)
legend("bottom", legend = roc_value, col=c("#1c61b6"), lwd=2)
legend("bottom", legend = roc_value, col=c("#1c61b6"), lwd=2)
sessionInfo()
pred_test <- predict(rf_model, testing)
confusionMatrix(pred_test, testing$diagnosis, positive = "Malignant")
ctrl <- trainControl(method="repeatedcv", repeats=3)
grid <- expand.grid(mtry = c(1, 2, 3, 5, 7, 10, 15, 20, 30))
set.seed(1)
rf_tune_model <- train(diagnosis ~ ., data=training, method="rf", tuneGrid = grid, trControl = ctrl)
rf_tune_model
rf_tune_model$finalModel
plot(rf_tune_model)
pred_tuned_test <- predict(rf_tune_model, testing)
confusionMatrix(pred_tuned_test, testing$diagnosis, positive="Malignant")
varImp(rf_tune_model)
varImpPlot(rf_tune_model)
plot(rf_var)
rf_var <- varImp(rf_tune_model)
plot(rf_var)
rf_roc <- roc(testing$diagnosis,
predict(rf_tune_model, testing, type = "prob")[,"Malignant"],
levels = rev(levels(testing$diagnosis)))
roc_value <- auc(rf_roc)
plot.roc(smooth(rf_roc), main = "RF ROC Curve", col = "blue")
legend("bottom", legend = roc_value, col=c("#1c61b6"), lwd=2)
library('ProjectTemplate')
load.project()
setwd("C://Users/Dell/Desktop/DAT640/Project/cancer")
library('ProjectTemplate')
load.project()
library('ProjectTemplate')
load.project()
library(knitr)
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
wbcd <- breast.cancer.wisconsin
str(wbcd)
head((wisconsin_bcd),6)
head((wbcd),6)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
summary(wbcd)
set.seed(1)
inTrain <- createDataPartition(wbcd$diagnosis, p=0.7, list=FALSE)
training <- wbcd[inTrain,]
testing <- wbcd[-inTrain,]
dim(training)
dim(testing)
table(testing$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred_test <- predict(rf_model, testing)
confusionMatrix(pred_test, testing$diagnosis, positive = "Malignant")
ctrl <- trainControl(method="repeatedcv", repeats=3)
grid <- expand.grid(mtry = c(1, 2, 3, 5, 7, 10, 15, 20, 30))
set.seed(1)
rf_tune_model <- train(diagnosis ~ ., data=training, method="rf", tuneGrid = grid, trControl = ctrl)
rf_tune_model
rf_tune_model$finalModel
plot(rf_tune_model)
pred_tuned_test <- predict(rf_tune_model, testing)
confusionMatrix(pred_tuned_test, testing$diagnosis, positive="Malignant")
rf_var <- varImp(rf_tune_model)
plot(rf_var)
rf_roc <- roc(testing$diagnosis,
predict(rf_tune_model, testing, type = "prob")[,"Malignant"],
levels = rev(levels(testing$diagnosis)))
roc_value <- auc(rf_roc)
plot.roc(smooth(rf_roc), main = "RF ROC Curve", col = "blue")
legend("bottom", legend = roc_value, col=c("#1c61b6"), lwd=2)
sessionInfo()
library('ProjectTemplate')
load.project()
wbcd <- breast.cancer.wisconsin
setwd("C://Users/Dell/Desktop/DAT640/Project/cancer")
library('ProjectTemplate')
load.project()
library(knitr)
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
library('ProjectTemplate')
load.project()
library(knitr)
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
View(breast.cancer.wisconsin)
setwd("C://Users/Dell/Desktop/Dat640/Project/cancer/data")
View(breast.cancer.wisconsin)
setwd("C://Users/Dell/Desktop/Dat640/Project/cancer/data")
View(breast.cancer.wisconsin)
projectTemplate::migrate.project()
library('ProjectTemplate')
load.project()
projectTemplate::migrate.project()
library('ProjectTemplate')
load.project()
projectTemplate::migrate.project()
projectTemplate::migrate.project()
library('ProjectTemplate')
load.project()
install.packages("projectTemplate")
install.packages("ProjectTemplate")
install.packages("ProjectTemplate")
library('ProjectTemplate')
load.project()
projectTemplate::migrate.project()
ProjectTemplate::migrate.project()
setwd("C://Users/Dell/Desktop/Dat640/Project/cancer/data")
View(breast.cancer.wisconsin)
setwd("C://Users/Dell/Desktop/DAT640/Project/cancer")
library('ProjectTemplate')
load.project()
library('ProjectTemplate')
load.project()
ProjectTemplate::migrate.project()
setwd("C://Users/Dell/Desktop/Dat640/Project/cancer/data")
View(breast.cancer.wisconsin)
library(knitr)
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
library(knitr)
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
wbcd <- breast.cancer.wisconsin
str(wbcd)
library('ProjectTemplate')
load.project()
ProjectTemplate::migrate.project()
ProjectTemplate::migrate.project()
library('ProjectTemplate')
load.project()
setwd("C://Users/Dell/Desktop/Dat640/Project/cancer/data")
View(breast.cancer.wisconsin)
wbcd <- read.csv("C://Users/Dell/Desktop/Dat640/Project/cancer/data/breast_cancer_wisconsin.csv",
header = TRUE)
```
wbcd <- read.csv("C://Users/Dell/Desktop/Dat640/Project/cancer/data/breast_cancer_wisconsin.csv",
header = TRUE)
```
wbcd <- read.csv("C://Users/Dell/Desktop/Dat640/Project/cancer/data/breast_cancer_wisconsin.csv",
header = TRUE)
str(wbcd)
library(ProjectTemplate)
load.project()
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
wbcd <- breast.cancer.wisconsin
str(wbcd)
wbcd$id <- NULL
wbcd$X <- NULL
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
str(wbcd)
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
summary(wbcd)
set.seed(1)
wbcd_split <- sample(1:3, size=nrow(wbcd), prob=c(0.7,0.15,0.15))
wbcd_split <- sample(1:3, size=nrow(wbcd), replace = TRUE, prob=c(0.7,0.15,0.15))
taining <- wbcd[splitSample==1,]
taining <- wbcd[wbcd_split==1,]
validating <- wbcd[wbcd_split==2,]
testing <- wbcd[wbcd_split==3,]
dim(training)
training <- wbcd[wbcd_split==1,]
dim(training)
dim(validating)
dim(testing)
table(testing$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred_valid <- predict(rf_model, validating)
confusionMatrix(pred_valid, validating$diagnosis, positive = "Malignant")
ctrl <- trainControl(method="repeatedcv", repeats=3)
grid <- expand.grid(mtry = c(1, 2, 3, 5, 7, 10, 15, 20, 30))
set.seed(1)
rf_tune_model <- train(diagnosis ~ ., data=validating, method="rf", tuneGrid = grid, trControl = ctrl)
rf_tune_model
rf_tune_model$finalModel
plot(rf_tune_model)
pred_tuned_test <- predict(rf_tune_model, testing)
confusionMatrix(pred_tuned_test, testing$diagnosis, positive="Malignant")
cbind(Frequency = table(wbcd$diagnosis), Percentage = (prop.table(table(wbcd$diagnosis))* 100))
set.seed(1)
wbcd_split <- sample(1:3, size=nrow(wbcd), replace = TRUE, prob=c(0.7,0.15,0.15))
training <- wbcd[wbcd_split==1,]
validating <- wbcd[wbcd_split==2,]
testing <- wbcd[wbcd_split==3,]
dim(training)
dim(validating)
dim(testing)
table(testing$diagnosis)
table(training$diagnosis)
table(validating$diagnosis)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
library(caret)
library(randomForest)
library(gbm)
library(rattle)
library(pROC)
library(plyr)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
pred_valid <- predict(rf_model, validating)
confusionMatrix(pred_valid, validating$diagnosis, positive = "Malignant")
ctrl <- trainControl(method="repeatedcv", repeats=3)
grid <- expand.grid(mtry = c(1, 2, 3, 5, 7, 10, 15, 20, 30))
set.seed(1)
rf_tune_model <- train(diagnosis ~ ., data=validating, method="rf", tuneGrid = grid, trControl = ctrl)
rf_tune_model
rf_tune_model$finalModel
plot(rf_tune_model)
pred_tuned_test <- predict(rf_tune_model, testing)
confusionMatrix(pred_tuned_test, testing$diagnosis, positive="Malignant")
rf_tune_model <- train(diagnosis ~ ., data=training, method="rf", tuneGrid = grid, trControl = ctrl)
rf_tune_model
rf_tune_model$finalModel
plot(rf_tune_model)
pred_tuned_test <- predict(rf_tune_model, testing)
confusionMatrix(pred_tuned_test, testing$diagnosis, positive="Malignant")
rf_var <- varImp(rf_tune_model)
plot(rf_var)
rf_roc <- roc(testing$diagnosis,
predict(rf_tune_model, testing, type = "prob")[,"Malignant"],
levels = rev(levels(testing$diagnosis)))
roc_value <- auc(rf_roc)
plot.roc(smooth(rf_roc), main = "RF ROC Curve", col = "blue")
legend("bottom", legend = roc_value, col=c("#1c61b6"), lwd=2)
set.seed(1)
rf_model <- train(diagnosis ~ ., data=training, method="rf")
rf_model
rf_model$finalModel
